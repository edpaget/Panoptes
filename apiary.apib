FORMAT: 1A
HOST: http://www.google.com

# Panoptes API
Panoptes API is a *crowdsourcing system* based on serving _subjects_,
images or other media, to _volunteers_ and asking them to _classify_
the _subject_ based on a defined _workflow_ for the _subject_ type.


# Authentication
Panoptes API provides an OAuth 2.0 authentication mechanism. (TODO:
Describe Authentication Workflow).

# Panoptes API Root [/]
Panoptes API entry point.

This resource does not have attributes intstead it lists links to the
available resources.

## Retrieve Entry Point [GET]

+ Response 200 (application/vnd.api+json)

    + Body
    
            {
                "links": {
                    "subjects": "/subjects",
                    "users": "/users",
                    "projects": "/projects",
                    "workflows": "/workflows",
                    "subject_sets": "/subject_sets",
                    "groups": "/groups",
                    "classifications": "/classifications",
                    "memberships": "/memberships",
                    "collections": "/collections"
                }
            }

# Group User
Resources related to *Panotpes API Users*

## User [/users/{id}]
A single User object. A User is representation of the identity and
contributions of a volunteer.

The User resource has the following attributes:

- id
- created_at
- updated_at
- credited_name
- display_name
- login
- email
- zooniverse_id
- classifications_count
- languages

*id*, *zooniverse_id*, *created_at*, *updated_at*, and
 *classification_count* are created and updated by the Panoptes API.

+ Parameters
    + id (integer) ... ID of the User as an integer key

+ Model (application/vnd.api+json)

    JSON-API representation of the User Resource.

    + Body

            {
                "links": {
                    "users.projects": {
                        "href": "/projects/{users.projects}",
                        "type": "projects"
                    },
                    "users.user_groups": {
                        "href": "/groups/{users.user_groups}",
                        "type": "user_groups"
                    },
                    "users.subjects": {
                        "href": "/subjects/{users.subjects}",
                        "type": "subjects"
                    },
                    "users.collections": {
                        "href": "/collections/{users.collections}",
                        "type": "collections"
                    }
                },
                "users": {
                    "id": 1,
                    "created_at": "2014-03-20T00:15:47Z",
                    "updated_at": "2013-09-30T10:20:32Z",
                    "created_name": "Dr. Stuart Lynn",
                    "display_name": "stuart",
                    "login": "stuart",
                    "email": "stuart@zoooniverse.org",
                    "zooniverse_id": "123432",
                    "classifications_count": "104",
                    "langauges": ["en-gb", "es-mx"],
                    "links": {
                        "projects": ["4", "43", "220"],
                        "user_groups": ["8"],
                        "subjects": ["1", "20", "40", "567"],
                        "collections": ["3"]
                    }
                }
            }

### Retrieve a single User [GET]
+ Response 200

    [User][]

### Edit a single User [PUT]
The currently logged in User may edit their record by sending a
partial representation of the resource including their changes. A User
cannot edit their links.

+ Request (application/vnd.api+json)

        {
            "users": {
                "credited_name": "Dr. Stuart Lynn, DDS"
            }
        }

+ Response 200 (application/vnd.api+json)

    [User][]

### Destory a single User [DELETE]
The current logged in User may delete themselves. This does not fully
remove their record. It deactivates their projects and removes
personally identifying information.

+ Response 204

## Users Collection [/users{?page,per_page,sort}]
Collection of all Users

All collections add a *meta* attribute hash containing
paging information.

- meta

User resources are included a an array under the _users_ key

+ Model (application/vnd.api+json)

    JSON-API formatted respresentation of the Users collection

    + Body
    
            {
                "links": {
                    "user.projects": {},
                    "user.user_groups": {},
                    "user.subjects": {},
                    "user.collections": {}
                },
                "meta": {
                    "users": {
                        "page": 1,
                        "page_size": 2,
                        "count": 28,
                        "include": [],
                        "page_count": 14,
                        "previous_page": 14,
                        "next_page": 2,
                        "first_href": "/users?page_size=2",
                        "previous_href": "/users?page=14page_size=2",
                        "next_href": "/users?page=2&page_size=2",
                        "last_href": "/users?page=14&page_size=2"
                    }
                },
                "users": [{
                    "id": 1,
                    "created_at": "2014-03-20T00:15:47Z",
                    "updated_at": "2013-09-30T10:20:32Z",
                    "created_name": "Dr. Stuart Lynn",
                    "display_name": "stuart",
                    "login": "stuart",
                    "email": "stuart@zoooniverse.org",
                    "zooniverse_id": "123432",
                    "classifications_count": "104",
                    "langauges": ["en-gb", "es-mx"],
                    "links": {
                        "projects": ["4", "43", "220"],
                        "user_groups": ["8"],
                        "subjects": ["1", "20", "40", "567"],
                        "collections": ["3"]
                    }
                },
                {
                    "id": 2,
                    "created_at": "2014-03-20T00:15:47Z",
                    "updated_at": "2013-09-30T10:20:32Z",
                    "created_name": "Dr. Stuart Lynn",
                    "display_name": "stuart",
                    "login": "stuart",
                    "email": "stuart@zoooniverse.org",
                    "zooniverse_id": "123432",
                    "classifications_count": "104",
                    "langauges": ["en-gb", "es-mx"],
                    "links": {
                        "projects": ["4", "43", "220"],
                        "user_groups": ["8"],
                        "subjects": ["1", "20", "40", "567"],
                        "collections": ["3"]
                    }
                }]
            }

### List all Users [GET]
+ Parameters
    + page (optional, integer) ... index of the collection page, 1 is default
    + per_page (optional, integer) ... number of items on a page. 20 is default
    + sort (optional, string) ... fields to sort collection by. id is default

+ Response 200

    [Users Collection][]
    
# Group Classification
Resources related to _Pantopes Classifications_.

## Classification [/classification/{id}]
A single Classification resource object. This represents a _user's_
responses to a _worflow's_ questions about a _subject_.
                
A classifications has the following attributes:

- id
- created_at
- updated_at
- complete
- annotations

Annotations is an array of hashes. Hashes that answer a workflow
question have the form `{ "key": "workflow question", "value": "user
response"}` in addition there are addtional metadata hashes that should be generated by a client:

- started_at
- finished_at
- user_agent

+ Model (application/vnd.api+json)

    JSON-API formatted represenation of a classificaiton object

    + Body

            {
                "links": {
                    "classifications.user": {
                        "href": "/users/{classifications.user",
                        "type": "classification"
                    },
                    "classifications.project": {
                        "href": "/projects/{classifications.project}",
                        "type": "project"
                    },
                    "classifications.workflow": {
                        "href": "/workflows/{classification.workflow}",
                        "type": "workflow"
                    },
                    "classifications.subject": {
                        "href": "/subjects/{classifications.subject}",
                        "type": "subject"
                    }
                },
                "classifications": {
                    "id": 1001,
                    "created_at": "2014-08-24T22:24:32Z",
                    "updated_at": "2014-08-24T22:24:32Z",
                    "complete": false,
                    "annotations": [
                        {"key": "workflow-1", "value": [10.4, 12.4, 13.2]},
                        {"started_at": "2014-08-24T22:20:21Z"},
                        {"finished_at": "2014-08-24T22:24:31Z"},
                        {"user_agent": "cURL"}
                    ],
                    "links": {
                        "user": "1",
                        "subject": "10",
                        "workflow": "81",
                        "project": "2"
                    }
                }
            }

### Retrieve a single Classification [GET]
A User can only retrieve a single classification is it not completed
in order to finish it. Otherwise they can get a list of
classifications from the Classification Collection resource.

+ Response 200

    [Classification][]

### Edit a single Classification [PUT]
A User may modify an incomplete classification. It should be marked as
completed when done.

+ Request (application/vnd.api+json)

        {
            "classifications": {
                "annotations": [
                    {"key": "workflow-1", "value": [10.4, 12.4, 13.2]},
                    {"key": "workflow-2", "value": "fishy"},
                    {"started_at": "2014-08-24T22:20:21Z"},
                    {"finished_at": "2014-08-24T22:24:31Z"},
                    {"user_agent": "cURL"}
                ],
                "complete": true
            }
        }

+ Response 200

    [Classification][]

### Destroy a single Classification [DELETE]
A User may delete an incomplete classification.

+ Response 204

## Classification Collection [/classifications{?page,per_page,sort,project_id,group_id}]
A representation of all the Classifications in a collection

All collections add a *meta* attribute hash containing
paging information.

Classifications are returned as an array under the _classifications_
key. 

+ Model (application/vnd.api+json)

    A JSON API formatted respresentation of a collection of
    classification resources

    + Body
    
            {
                "links": {
                    "classifications.user": {
                        "href": "/users/{classifications.user}",
                        "type": "classification"
                    },
                    "classifications.project": {
                        "href": "/projects/{classifications.project}",
                        "type": "project"
                    },
                    "classifications.workflow": {
                        "href": "/workflows/{classification.workflow}",
                        "type": "workflow"
                    },
                    "classifications.subject": {
                        "href": "/subjects/{classifications.subject}",
                        "type": "subject"
                    }
                },
                "meta": {
                    "classifications": {
                        "page": 1,
                        "page_size": 2,
                        "count": 28,
                        "include": [],
                        "page_count": 14,
                        "previous_page": 14,
                        "next_page": 2,
                        "first_href": "/classifications?page_size=2",
                        "previous_href": "/classifications?page=14page_size=2",
                        "next_href": "/classifications?page=2&page_size=2",
                        "last_href": "/classifications?page=14&page_size=2"
                    }
                },
                "classifications": [{
                    "id": 1001,
                    "created_at": "2014-08-24T22:24:32Z",
                    "updated_at": "2014-08-24T22:24:32Z",
                    "complete": false,
                    "annotations": [
                        {"key": "workflow-1", "value": [10.4, 12.4, 13.2]},
                        {"started_at": "2014-08-24T22:20:21Z"},
                        {"finished_at": "2014-08-24T22:24:31Z"},
                        {"user_agent": "cURL"}
                    ],
                    "links": {
                        "user": "1",
                        "subject": "10",
                        "workflow": "81",
                        "project": "2"
                    }
                },
                {
                   "id": 1002,
                    "created_at": "2014-08-24T22:25:32Z",
                    "updated_at": "2014-08-24T22:28:32Z",
                    "complete": true,
                    "annotations": [
                        {"key": "workflow-1", "value": [10.4, 12.4, 13.2]},
                        {"key": "workflow-2", "value": "starry"},
                        {"started_at": "2014-08-24T22:24:21Z"},
                        {"finished_at": "2014-08-24T22:28:31Z"},
                        {"user_agent": "cURL"}
                    ],
                    "links": {
                        "user": "1",
                        "subject": "11",
                        "workflow": "81",
                        "project": "2"
                    }
                }]
                
            }

### List all classifications [GET]
Only lists a classifications the active user has made, or
classifications from other members of a user_group or projects the
user has permission to view.

+ Parameters
    + page (optional, integer) ... index of the collection page, 1 is default
    + per_page (optional, integer) ... number of items on a page. 20 is default
    + sort (optional, string) ... fields to sort collection by. updated_at is default
    + project_id (optional, integer) ... only retrieve classifications for a specific project
    + group_id (optional, integer) ... only retrieve classifications for a specific user group

+ Response 200

    [Classification Collection][]

### Create a Classification [POST]
Create a classification by providing a JSON-API formatted object that
must include annotations and a links hash with a subject, a project, and a
workflow. Optionally may include the complete field, which will be
set to true by default.

+ Request (application/vnd.api+json)

        {
            "classifications": {
                "complete": false,
                "annotations": [
                    {"key": "workflow-1", "value": [10.4, 12.4, 13.2]},
                    {"started_at": "2014-08-24T22:20:21Z"},
                    {"finished_at": "2014-08-24T22:24:31Z"},
                    {"user_agent": "cURL"}
                ],
                "links": {
                    "subject": "11",
                    "workflow": "81",
                    "project": "2"
                }
            }
        }

+ Response 201

    [Classification][]

# Group Subjects
Resources related to _Panoptes Subjects_.

## Subject [/subjects/{id}]
A single Subject object. A Subject is a resource that describe a
peice of media to be classified including metadata about the object.

- id
- zooniverse_id
- created_at
- updated_at
- locations
- metadata

*id*, *zooniverse_id*, *created_at*, and *updated_at* are assigned by
 the API. 

+ Model (application/vnd.api+json)

    JSON API formatted represenation of a Panoptes Subjects

    + Body
    
            {
                "links": {
                    "subjects.project": {
                        "href": "/projects/subjects.project",
                        "type": "project"
                    }
                },
                "subjects": {
                    "id": "1",
                    "zooniverse_id": "AGFS0001231",
                    "created_at": "2014-03-24T10:42:21Z",
                    "updated_at": "2014-03-24T10:42:21Z",
                    "locations": {
                        "standard": "http://s3.amazonaws.com/subjects/1.png"
                    },
                    "metadata": {
                        "lens_type": "50mm"
                    },
                    "links": {
                        "project": "1",
                        "owner": {
                            "id": "2",
                            "href": "/users/2",
                            "type": "user"
                        }
                    }
                }
            }

### Retrieve a single Subject [GET]
+ Response 200

    [Subject][]

### Edit a single Subject [PUT]
Users are permitted to edit subjects they own or subjects
belonging to projects a user has edit permissions for. The request
should contain a full representation of the locations and/or
metadata hash. You cannot change the project or owner of a subject.

+ Request (application/vnd.api+json)

        {
            "subjects": {
                "locations": {
                    "standard": "http://s3.amazonaws.com/subjects/2.jpg"
                }
            }
        }

+ Response 200

    [Subject][]

### Destroy a single subject [DELETE]
Users are permitted to destroy a subjects they own or
subjects belongs to a project a user has destroy permissions for.

+ Response 204

## Subject Collection [/subjects{?page,per_page,sort,workflow_id,subject_set_id}]
Represenents a collection of subjects. 

All collections add a *meta* attribute hash containing paging information.

Subjects are returned as an array under the _subject_ key.

+ Model (application/vnd.api+json)

    + Body

            {
                "links": {
                    "subjects.project": {
                        "href": "/projects/subjects.project",
                        "type": "project"
                    }
                },
                "meta": {
                    "subjects": {
                        "page": 1,
                        "page_size": 2,
                        "count": 28,
                        "include": [],
                        "page_count": 14,
                        "previous_page": 14,
                        "next_page": 2,
                        "first_href": "/subjects?page_size=2",
                        "previous_href": "/subjects?page=14page_size=2",
                        "next_href": "/subjects?page=2&page_size=2",
                        "last_href": "/subjects?page=14&page_size=2"
                    }
                },
                "subjects": [{
                    "id": "1",
                    "zooniverse_id": "AGFS0001231",
                    "created_at": "2014-03-24T10:42:21Z",
                    "updated_at": "2014-03-24T10:42:21Z",
                    "locations": {
                        "standard": "http://s3.amazonaws.com/subjects/1.png"
                    },
                    "metadata": {
                        "lens_type": "50mm"
                    },
                    "links": {
                        "project": "1",
                        "owner": {
                            "id": "2",
                            "href": "/users/2",
                            "type": "user"
                        }
                    }
                },{
                    "id": "2",
                    "zooniverse_id": "AGFS0001232",
                    "created_at": "2014-03-24T10:44:21Z",
                    "updated_at": "2014-03-24T10:44:21Z",
                    "locations": {
                        "standard": "http://s3.amazonaws.com/subjects/2.png"
                    },
                    "metadata": {
                        "lens_type": "50mm"
                    },
                    "links": {
                        "project": "1",
                        "owner": {
                            "id": "4",
                            "href": "/groups/4",
                            "type": "user_group"
                        }
                    }
                }]
            }

### Retrieve a List of Subjects [GET]
Subjects allow a special sort option called 'random' that produces a
random list of subjects that have not been seen by the
active user. When the random sort is used, *workflow_id* is a
required parameter.

Subjects also allow an 'queued' sort, which will return a random
subset of subjects have a been queued for a particular user to
classify, usually for expert classifiers. 

+ Parameters
  + page (optional, integer) ... the index of the page to retrieve default is 1
  + per_page (optional, integer) ... number of items to include on a page default is 20
  + sort (optional, string) ... field to sort by 'random' and 'queued' have special behaviour
  + workflow_id (optional, intger) ... filter to subjects belonging to a specific workflow. Required when sort is 'random'
  + subject_set_id (optional, intger) ... return subjects belonging to the identified subject_set

+ Response 200

    [Subject Collection][]

### Create a Subject [POST]
Locations and a project link are required. Metadata and a link to an
owner besides the active user are optional.

+ Request (application/vnd.api+json)

        {
            "subjects": {
                "locations": {
                    "standard": "http://s3.amazonaws.com/subjects/2.png"
                },
                "metadata": {
                    "lens_type": "50mm"
                },
                "links": {
                    "project": "1",
                    "owner": {
                        "id": "4",
                        "type": "user_group"
                    }
                }
            }
        }

+ Response 201

    [Subject][]

# Group Projects
Resources related to _Panoptes Projects_.

## Project [/projects/{id}]
A Project is a collection of subjects and task workflows that a
volunteer performs on subjects. The project also holds supplementary
text describing the tasks volunteers perform.

It has the following attributes:

- id
- created_at
- updated_at
- name
- display_name
- content
- user_count
- classification_count
- activated_state
- primary_language
- visible_to

*id*, *created_at*, *updated_at*, *user_count*, and
 *classification_count* are set by the API.

+ Model (application/vnd.api+json)

    + Body
            
            {
                "links": {
                    "projects.subjects": {
                        "href": "/subjects{?project_id=projects.id}",
                        "type": "subject"
                    },
                    "projects.classifications": {
                        "href": "/classifications{?project_id=projects.id}",
                        "type": "classification"
                    },
                    "projects.workflows": {
                        "href": "/workflows/{projects.workflows}",
                        "type": "workflow"
                    },
                    "projects.subject_sets": {
                        "href": "/subject_sets/{projects.subject_sets}",
                        "type": "subject_Sets"
                    }
                },
                "projects": {
                    "id": "1",
                    "created_at": "2014-03-24T10:42:21Z",
                    "updated_at": "2014-03-24T10:42:21Z",
                    "name": "galaxy_zoo",
                    "display_name": "Galaxy Zoo",
                    "primary_language": "en",
                    "user_count": "10000",
                    "classification_count": "1000000",
                    "activated_state": 0,
                    "visible_to": [],
                    "content": {
                        "title": "Galaxy Zoo",
                        "description": "A Project ...",
                        "pages": {},
                        "language": "en"
                    },
                    "links": {
                        "workflows": ["1", "2"],
                        "subject_sets": ["10", "13"],
                        "owner": {
                            "id": "2",
                            "href": "/users/2",
                            "type": "user"
                        }
                    }
                }
            }

### Retrieve a single Project [GET]

+ Response 200

    [Project][]

### Edit a single Project [PUT]
A User must be the owner of a project or have update
permissions to edit. Workflow and Subject links may be edited. Removing a
subject set or workflow causes the subject set or workflow to be
destroyed. Adding a workflow or subject set causes the original to be
copied and a new id to be returned. 

+ Request (application/vnd.api+json)

        {
            "projects": {
                "display_name": "Galaxy Zooooooooo!",
                "links": {
                    "workflows": ["1"],
                    "subject_sets": ["10"]
                }
            }
        }

+ Response 200

    [Project][]

### Destroy a single Project [DELETE]
A user may destroy a project they own or have destroy permissions for.

+ Response 204

## Project Create Links [/project/{id}/links/{link_type}]
An alternative way to edit a project's subject set and workflow
links.

### Add a Link [POST]
The body key must match the link_type parameter. Workflow and Subjects
added in this way will be copied and their id will be returned as part
of the complete Project representation response.

+ Parameters
  + id (required, integer) ... the id of the project to modify
  + link_type (required, string) ... the name of the link to edit. May only be workflow or subject_set

+ Request (application/vnd.api+json)

        {
            "subject_sets": ["1", "2"]
        }

+ Response 200

    [Project][]

## Project Destroy Links [/project/{id}/links/{link_type}/{link_ids}]
An alternative way to destroy project links.

### Destroy a Link [DELETE]
Will destroy the comma seperated list of link ids for the given link
type. For Projects, only workflow and subject_set links can be
destroyed in this manner. The linked object will be destroyed with
this action.

+ Parameters
  + id (required, integer) ... the id of the project to modify
  + link_type (required, string) ... the name of the link to edit. May only be subject_set or workflow
  + link_ids (required, string) ... comma seperated list of ids to modify

+ Response 204

## Project Collection [/projects{?page,per_page,sort,owner}]
A collection of _Panotpes Project_ resources.

All collections add a *meta* attribute hash containing
paging information.

Projects are returned as an array under the _projects_ key.

+ Model (application/vnd.api+json)

    A JSON API formatted representation of a collection of Projects.

    + Body
    
            {
                "links": {
                    "projects.subjects": {
                        "href": "/subjects{?project_id=projects.id},
                        "type": "subject"
                    },
                    "projects.classifications": {
                        "href": "/classifications{?project_id=projects.id}",
                        "type": "classification"
                    },
                    "projects.workflows": {
                        "href": "/workflows/{projects.workflows}",
                        "type": "workflow"
                    },
                    "projects.subject_sets": {
                        "href": "/subject_sets/{projects.subject_sets}",
                        "type": "subject_Sets"
                    }
                },
                "meta": {
                   "projects": {
                        "page": 1,
                        "page_size": 2,
                        "count": 28,
                        "include": [],
                        "page_count": 14,
                        "previous_page": 14,
                        "next_page": 2,
                        "first_href": "/projects?page_size=2",
                        "previous_href": "/projects?page=14page_size=2",
                        "next_href": "/projects?page=2&page_size=2",
                        "last_href": "/projects?page=14&page_size=2"
                    }
                },
                "projects": [{
                    "id": "1",
                    "created_at": "2014-03-24T10:42:21Z",
                    "updated_at": "2014-03-24T10:42:21Z",
                    "name": "galaxy_zoo",
                    "display_name": "Galaxy Zoo",
                    "primary_language": "en",
                    "user_count": "10000",
                    "classification_count": "1000000",
                    "activated_state": 0,
                    "visible_to": [],
                    "content": {
                        "title": "Galaxy Zoo",
                        "description": "A Project ...",
                        "pages": {},
                        "language": "en"
                    },
                    "links": {
                        "workflows": ["1", "2"],
                        "subject_sets": ["10", "13"],
                        "owner": {
                            "id": "2",
                            "href": "/users/2",
                            "type": "user"
                        }
                    }
                },{
                    "id": "2",
                    "created_at": "2014-04-24T10:42:21Z",
                    "updated_at": "2014-04-24T10:42:21Z",
                    "name": "planet_hunters",
                    "display_name": "Planet Hunters",
                    "primary_language": "zh-tw",
                    "user_count": "100000",
                    "classification_count": "122340000000",
                    "activated_state": 0,
                    "visible_to": [],
                    "content": {
                        "title": "Planet Hunters",
                        "description": "A Project ...",
                        "pages": {},
                        "language": "zw-tw"
                    },
                    "links": {
                        "workflows": ["10", "21"],
                        "subject_sets": ["11", "12"],
                        "owner": {
                            "id": "2",
                            "href": "/users/2",
                            "type": "user"
                        }
                    }
                }]
            }
            
### List All Projects [GET]
+ Parameters
  + page (optional, integer) ... the index of the page to retrieve default is 1
  + per_page (optional, integer) ... number of items to include on a page default is 20
  + sort (optional, string) ... field to sort by
  + owner (optional, string) ... string owner name of either a user or a user group to filter by.

+ Response 200

    [Project Collection][]


### Create a Project [POST]
Requires at least a name, description, and primary language. Workflows
and Subject sets added as links will be copied and their new ids
returned.

+ Request (application/vnd.api+json)

        {
            "projects": {
                "name": "galaxy_zoo",
                "description": "A doubleplus good project",
                "language": "en-us",
                "links": {
                    "workflows": ["1", "2"]
                    "owner": {
                        "id": 10,
                        "type": "user_group"
                    }
                }
            }
        }

+ Response 201

    [Project][]

# Group Workflows
Resources related to _Panoptes Workflows_.

## Workflow [/workflows/{id}]
Workflows represent the series of questions/tasks a user will be asked
to complete for a subject.

A workflow has the following attributes

- id
- created_at
- updated_at
- name
- tasks
- classifications_count
- pairwise
- grouped
- prioritized
- primary_language
- content

*id*, *created_at*, *updated_at*, and *classifications_count* are
 assigned by the API

+ Model (application/vnd.api+json)

    + Body

            {
                "links": {
                    "workflows.subjects": {
                        "href": "/subjects{?workflow_id=workflows.id}",
                        "type": "subject"
                    },
                    "workflows.project": {
                        "href": "/projects/{workflows.project}",
                        "type": "project"
                    },
                    "workflows.subject_sets": {
                        "href": "/subject_sets/{workflows.subject_set}",
                        "type": "subject_set"
                    }
                },
                "workflows": {
                    "id": "22",
                    "name": "Find moons",
                    "created_at": "2014-02-13T10:11:34Z",
                    "updated_at": "2014-02-13T10:11:34Z",
                    "classifications_count": 1000,
                    "pairwise": false,
                    "grouped" : false,
                    "prioritized": false,
                    "primary_language": "es-mx",
                    "content": {
                        "strings": { "task_key": "string for key"},
                        "language": "es-mx"
                    },
                    "tasks": { "format": "tbd"},
                    "links": {
                        "project": "1",
                        "subject_sets": ["7", "9"]
                    }
                }
            }

### Retrieve a single Workflow [GET]

+ Response 200

    [Workflow][]

### Edit a single workflow [PUT]
A user may edit a workflow if they have edit permissions for the parent
project. Editing tasks content requires a full replacement for the
field. Only the subject set link may be edited. Removing a subject_set
link doesn't destroy the subject_set.

+ Request (application/vnd.api+json)

        {
            "workflows": {
                "tasks": { "format": "all new!"},
                "links": {
                    "subject_sets": ["8"]
                }
            }
        }

+ Response 200

    [Workflow][]

### Destroy a single workflow [DELETE]
A user may destroy a workflow if they have destroy permissions for the
parent project.

+ Response 204

## Update subject set links [/workflow/{id}/links/subject_set]
An alternative way to update links.

### Update subject sets [POST]
Adds the posted subject sets to a workflow's links. Creates a copy of
the subject set if it belongs do a different project.

+ Parameters
  + id (required, integer) ... id of workflow to update

+ Request (application/vnd.api+json)

        { "subject_sets": ["9"] }

+ Response 200

    [Workflow][]

## Destroy subject set links [/workflow/{id}/links/subject_set/{subject_set_ids}]
An alternative way to remove links.

### Destroy stubject set [DELETE]
Removes workflow's links to the given subject_sets. It does not
destroy the subject set models.

+ Parameters
  + id (required, integer) ... id of workflow to update
  + subject_set_ids (required, string) ... comma seperated list of ids to destroy

+ Response 204

## Workflow Collection [/workflow{?page,per_page,sort,project_id}]
A collection of _Panotpes Workflow_ resources.

All collections add a *meta* attribute hash containing
paging information.

- meta

Workflows are returned as an array under the _workflows_ key.

+ Model (application/vnd.api+json)

    A JSON API formatted representation of a collection of workflows.

    + Body

             {
                "links": {
                    "workflows.subjects": {
                        "href": "/subjects{?workflow_id=workflows.id}",
                        "type": "subject"
                    },
                    "workflows.project": {
                        "href": "/projects/{workflows.project}",
                        "type": "project"
                    },
                    "workflows.subject_sets": {
                        "href": "/subject_sets/{workflows.subject_set}",
                        "type": "subject_set"
                    }
                },
                "meta": {
                   "workflows": {
                        "page": 1,
                        "page_size": 2,
                        "count": 28,
                        "include": [],
                        "page_count": 14,
                        "previous_page": 14,
                        "next_page": 2,
                        "first_href": "/workflows?page_size=2",
                        "previous_href": "/workflows?page=14page_size=2",
                        "next_href": "/workflows?page=2&page_size=2",
                        "last_href": "/workflows?page=14&page_size=2"
                    }
                },
                "workflows": [{
                    "id": "22",
                    "name": "Find moons",
                    "created_at": "2014-02-13T10:11:34Z",
                    "updated_at": "2014-02-13T10:11:34Z",
                    "classifications_count": 1000,
                    "pairwise": false,
                    "grouped" : false,
                    "prioritized": false,
                    "primary_language": "es-mx",
                    "content": {
                        "strings": { "task_key": "string for key"},
                        "language": "es-mx"
                    },
                    "tasks": { "format": "tbd"},
                    "links": {
                        "project": "1",
                        "subject_sets": ["7", "9"]
                    }
                },{
                    "id": "23",
                    "name": "Find planets",
                    "created_at": "2014-08-13T10:11:34Z",
                    "updated_at": "2014-08-13T10:11:34Z",
                    "classifications_count": 18910,
                    "pairwise": false,
                    "grouped" : true,
                    "prioritized": false,
                    "primary_language": "en-gb",
                    "content": {
                        "strings": { "task_key": "string for key"},
                        "language": "en-gb"
                    },
                    "tasks": { "format": "tbd"},
                    "links": {
                        "project": "8",
                        "subject_sets": ["1", "91"]
                    }
                }]
            }

### List All Workflows [GET]
+ Parameters
  + page (optional, integer) ... the index of the page to retrieve default is 1
  + per_page (optional, integer) ... number of items to include on a page default is 20
  + sort (optional, string) ... field to sort by id by default
  + project_id (optional, integer) ... filter workflows by project id

+ Response 200

    [Workflow Collection][]

### Create a Workflow [POST]
Requires a set of tasks, a primary language, a name, and a
link to a project. Can optionally set random select parameters (false
by default) and links to subject sets.

Stings in tasks are moved to the content hash in the response.

+ Request (application/vnd.api+json)

        {
            "workflows": {
                "name": "Spot Monsters!",
                "tasks": { "Format": "still waiting..."},
                "primary_language": "en-ca",
                "links": {
                    "subject_sets": ["1", "2"]
                }
            }
        }

+ Response 201

    [Workflow][]

# Group Subject Set
Resources related to _Panoptes SubjectSets_

## SubjectSet [/subject_sets/{id}]
Subject Sets represent collections of Subjects that are paired with a
workflow of questions to be answered.

A SubjectSet has the following attributes

- id
- name
- set_member_subjects_count
- created_at
- updated_at

All attributes except name are set by the API

+ Model (application/vnd.api+json)

    + Body

            {
                "links": {
                    "subject_sets.workflows": {
                        "href": "/workflows/{subject_sets.workflows}",
                        "type": "workflow"
                    },
                    "subject_sets.subjects": {
                        "href": "/subjects{?subject_set_id=subject_sets.id}",
                        "type": "subject_sets"
                    },
                    "subject_sets.project": {
                        "href": "/project/{subject_sets.project}",
                        "type": "project"
                    }
                },
                "subject_sets": {
                    "id": "20",
                    "name": "Weird Looking Galaxies",
                    "created_at": "2014-02-13T10:11:34Z",
                    "updated_at": "2014-02-13T10:11:34Z",
                    "set_member_subject_cound": 100,
                    "links": {
                        "project": "1"
                        "workflows": ["1", "3"]
                    }
                }
            }
                        
### Retrieve a single Subject Set [GET]
+ Response 200

    [SubjectSet][]

### Edit a single Subject Set [PUT]
A user may only edit a subject if they edit permissions for the parent
project. The name attributes and links to workflows and subjects are
editable. Editing links requires a full representation of the new set
of links, but does not destroy unlinked resources.

+ Request (application/vnd.api+json)

        {
            "subject_sets": {
                "name": "Normal Galaxies",
                "links": {
                    "subjects": ["1", "2", "4", "5", "10"]
                }
            }
        }

+ Response 200

    [SubjectSet][]

### Destroy a single Subject Set [DELETE]
A user may only destroy a subject set if they have destroy permissions
for the subject set's project.

+ Response 204

## Subject Set Links [/subject_sets/{id}/links/{link_type}]
Allows the addition of links to workflows and subjects to a subject
set object without needing to set a full representation of the linked
relationship.

+ Parameters
  + id (required, integer) ... the id of the Subject Set to modify
  + link_type (required, integer) ... the relationship to modify must be the same as the supplied body key

### Add to link [POST]
Only then Subjects and Workflows links may be edited.

+ Request (application/vnd.api+json)

        {
            "subjects": ["1", "5", "9", "11"]
        }

+ Response 200

    [SubjectSet][]

## Destroy Subject Set Links [/subject_sets/{id}/links/{link_type}/{link_ids}]
Allows links to be removed without sending a full represenation of the
linked relationship.

+ Paraemters
  + id (required, integer) ... the id of the Subject Set to modify
  + link_type (required, string) ... the relationship to modify
  + link_ids (required, string) ... comma seperated string of ids to remove

### Destroy some links [DELETE]
Will only remove the link. This operation does not destroy the linked object.

+ Response 204


## SubjectSet Collection [/subject_sets{?page,per_page,sort,project_id,workflow_id}]
A collection of SubjectSet resources.

All collections add a meta attribute hash containing paging
information.

Subject Sets are returned as an array under *subject_sets*.

+ Model (application/vnd.api+json)

    + Body

            {
                "links": {
                    "subject_sets.workflows": {
                        "href": "/workflows/{subject_sets.workflows}",
                        "type": "workflow"
                    },
                    "subject_sets.subjects": {
                        "href": "/subjects{?subject_set_id=subject_sets.id}",
                        "type": "subject_sets"
                    },
                    "subject_sets.project": {
                        "href": "/project/{subject_sets.project}",
                        "type": "project"
                    }
                },
                "meta": {
                    "subject_sets": {
                        "page": 1,
                        "page_size": 2,
                        "count": 28,
                        "include": [],
                        "page_count": 14,
                        "previous_page": 14,
                        "next_page": 2,
                        "first_href": "/subject_sets?page_size=2",
                        "previous_href": "/subject_sets?page=14page_size=2",
                        "next_href": "/subject_sets?page=2&page_size=2",
                        "last_href": "/subject_sets?page=14&page_size=2"
                    }
                },
                "subject_sets": {
                    "id": "20",
                    "name": "Weird Looking Galaxies",
                    "created_at": "2014-02-13T10:11:34Z",
                    "updated_at": "2014-02-13T10:11:34Z",
                    "set_member_subject_cound": 100,
                    "links": {
                        "project": "1"
                        "workflows": ["1", "3"]
                    }
                }
            }

### Retrieve a list of Subject Sets [GET]
+ Parameters
  + page (optional, integer) ... index of the page to retrieve 1 by default
  + per_page (optional, integer) ... number of items per page 20 by default
  + sort (optional, string) ... field to sort by, id by default
  + project_id (optional, integer) ... filter by linked project
  + workflow_id (optional, integer) ... filter by linked workflow

+ Response 200

    [SubjectSet Collection][]

### Create a Subject Set [POST]
A subject set must supply a name and a link to a project. Optionally,
it may include links to subjects and workflows.

+ Request (application/vnd.api+json)

        {
            "subject_sets": {
                "name": "A Group of Interesting Subjects"
                "links": {
                    "project": "43",
                    "subjects": ["234", "1243", "8023"]
                }
            }
        }

+ Response 201

    [SubjectSet][]

#Group User Group
Resources related to _Panoptes User Groups_

## UserGroup [/groups/{id}]
A user group represents a collection of users that share ownership of
projects, collections, and classifications. Individual users within
the group can be given different levels of permissions to act on
group owned resources.

A User Group has the following attributes:

- id
- created_at
- updated_at
- classifications_count
- activated_state
- name
- display_name

*id*, *created_at*, *updated_at*, and *classifications_count* are all
 set by the API.

+ Model (application/vnd.api+json)

    + Body

            {
                "links": {
                    "user_groups.projects": {
                        "href": "/projects/{user_groups.projects}",
                        "type": "projects"
                    },
                    "user_groups.classifications": {
                        "href": "/classifications{?user_group_id=user_groups.id}",
                        "type": "classification"
                    },
                    "user_groups.collections": {
                        "href": "/collections/{user_groups.collections}"
                        "type": "collection"
                    },
                    "user_groups.users": {
                        "href": "/users/{user_groups.users}",
                        "type": "users"
                    },
                    "user_groups.memberships": {
                        "href": "/memberships/{user_groups.memberships}",
                        "type": "membership"
                    }
                },
                "user_groups": {
                    "id": "42",
                    "name": "a_cool_group",
                    "display_name": "A Cool Group",
                    "created_at": "2014-08-11T10:11:34Z",
                    "updated_at": "2014-12-11T00:11:34Z",
                    "classifications_count": "1002340",
                    "activated_state": "active",
                    "links": {
                        "projects": ["123", "234"],
                        "collections": ["13", "32"],
                        "users": ["142", "84", "823", "732"],
                        "memberships": ["124", "234", "234", "881", "872"]
                    }
                }
            }

### Retrieve a single User Group [GET]

+ Response 200

    [UserGroup][]

### Edit a single User Group [PUT]
A user with edit permissions on a user group may edit the group's
name, display_name, or links to projects, collections and
users. Projects and Collections may only be removed. Removing a
link to a project or collection will destroy the project or
collection, removing a link to a user will set their 
membership state to inactive.

Adding a user creates a membership link with an 'invited'
state. Membership and Classification links cannot be modified.

+ Request (application/vnd.api+json)

        {
            "user_groups": {
                "display_name": "A Uncool Group",
                "links": {
                    "projects": [],
                    "collections": []
                }
            }
        }

+ Response 200

    [UserGroup][]


### Destroy a User Group [DELETE]
A user may destroy a group if they have the requisite permissions. A
destroyed group and linked projects, collections, and memberships will
be placed in an 'inactive' state.

+ Response 204

## Add a link [/groups/{id}/links/users]
Only links to users may be added.

### Add user links [POST]
Creates a membership for a user. The membership will be immediately
added, but a user won't show up in the group's links until they set
their membership to 'active'. 

+ Request (application/vnd.api+json)

        {
            "users": ["123", "23"]
        }

+ Response 200

    [UserGroup][]

## Remove a Link [/groups/{id}/links/{link_type}/{link_ids}]
Allows links to users, projects, or collections to be removed. Removed
projects and collections are deleted. Removed users have their
membership set to 'inactive'.

+ Parameters
  + id (required, integer) ... id of the group to be edited.
  + link_type (required, string) ... name of the link to modify
  + link_ids (required, string) ... comma seperated list of ids to remove

### Remove links [DELETE]
+ Response 204

## UserGroup Collection [/groups{?page,per_page,sort,user_id}]
A collection of User Group resources.

All collections add a meta attribute hash containing paging
information.

User Groups are returned as an array under *user_groups*.

+ Model (application/vnd.api+json)

    + Body
 
            {
                "links": {
                    "user_groups.projects": {
                        "href": "/projects/{user_groups.projects}",
                        "type": "projects"
                    },
                    "user_groups.classifications": {
                        "href": "/classifications{?user_group_id=user_groups.id}",
                        "type": "classification"
                    },
                    "user_groups.collections": {
                        "href": "/collections/{user_groups.collections}"
                        "type": "collection"
                    },
                    "user_groups.users": {
                        "href": "/users/{user_groups.users}",
                        "type": "users"
                    },
                    "user_groups.memberships": {
                        "href": "/memberships/{user_groups.memberships}",
                        "type": "membership"
                    }
                },
                "meta": {
                    "user_groups": {
                        "page": 1,
                        "page_size": 2,
                        "count": 28,
                        "include": [],
                        "page_count": 14,
                        "previous_page": 14,
                        "next_page": 2,
                        "first_href": "/groups?page_size=2",
                        "previous_href": "/groups?page=14page_size=2",
                        "next_href": "/groups?page=2&page_size=2",
                        "last_href": "/groups?page=14&page_size=2"
                    }
                },
                "user_groups": [{
                    "id": "42",
                    "name": "a_cool_group",
                    "display_name": "A Cool Group",
                    "created_at": "2014-08-11T10:11:34Z",
                    "updated_at": "2014-12-11T00:11:34Z",
                    "classifications_count": "1002340",
                    "activated_state": "active",
                    "links": {
                        "projects": ["123", "234"],
                        "collections": ["13", "32"],
                        "users": ["142", "84", "823", "732"],
                        "memberships": ["124", "234", "234", "881", "872"]
                    }
                },{
                    "id": "44",
                    "name": "a_cool_gang",
                    "display_name": "A Cool Gang",
                    "created_at": "2014-09-10T10:41:54Z",
                    "updated_at": "2014-11-11T01:21:33Z",
                    "classifications_count": "2341",
                    "activated_state": "active",
                    "links": {
                        "projects": [],
                        "collections": ["12", "82"],
                        "users": ["142", "84", "823", "732"],
                        "memberships": ["124", "234", "234"]
                    }
                }]
            }

### List all User Groups [GET]
+ Parameters
  + page (optional, integer) ... index of the page to retrieve 1 by default
  + per_page (optional, integer) ... number of items per page 20 by default
  + sort (optional, string) ... field to sort by, id by default
  + user_id (optional, integer) ... filter list to groups a user is part of

+ Response 200

    [UserGroup Collection][]

### Create a User Group [POST]
A user can create new group by just giving it a display name. The name
will be set to the underscored downcased version of the display name,
and they will added as the sole active users. Optionally a user may
specify a different name and links to other users who will be given
memberships with the 'invited' state.

+ Request (application/vnd.api+json)

        {
            "user_groups": {
                "display_name": "A Super Grouper!",
                "links": {
                    "users": ["10", "22"]
                }
            }
        }
                
+ Response 201

    [UserGroup][]

#Group Membership
Resources related to _Panoptes Group Memberships_

## Membership [/memberships/{id}]
A membership represents and user's status in a group and their role
within the group.

It has the following attributes:

- id
- created_at
- updated_at
- state
- roles

*id*, *created_at*, and *update_at* are assigned by the API.

+ Model (application/vnd.api+json)

    + Body

            {
                "links": {
                    "memberships.user_group": {
                        "href": "/groups/{memberships.user_group}",
                        "type": "user_group"
                    },
                    "memberships.user": {
                        "href": "/users/{memberships.user}",
                        "type": "user"
                    }
                },
                "memberships": {
                    "id": "101",
                    "created_at": "2014-04-20T06:23:12Z",
                    "created_at": "2014-04-20T06:23:12Z",
                    "state": "active",
                    "roles": ["group_admin"],
                    "links": {
                        "user": "12",
                        "user_groups": "31"
                    }
                }
            }
                    
### Retreive a Membership [GET]

+ Response 200

    [Membership][]

### Edit a Membership [PUT]
A user can ordinary only change their membership state. A user with
user group edit permissions can change the membership's roles.

+ Request (application/vnd.api+json)

        {
            "memberships": {
                "state": "inactive"
            }
        }

+ Response 200

    [Membership][]

### Destroy a Membership [DELETE]
Destroying a membership only sets the state to inactive. A user may
destroy their own memberships and a user with edit permission in a
user group may destroy membership for that group.

+ Response 204

## Membership Collection [/memberships{?page,per_page,sort,user_id,user_group_id}]
A collection of Membership resources.

All collections add a meta attribute hash containing paging
information.

Memberships are returned as an array under *memberships*.

+ Model (application/vnd.api+json)

    + Body

            {
                "links": {
                    "memberships.user_group": {
                        "href": "/groups/{memberships.user_group}",
                        "type": "user_group"
                    },
                    "memberships.user": {
                        "href": "/users/{memberships.user}",
                        "type": "user"
                    }
                },
                "meta": {
                    "memberships": {
                        "page": 1,
                        "page_size": 2,
                        "count": 28,
                        "include": [],
                        "page_count": 14,
                        "previous_page": 14,
                        "next_page": 2,
                        "first_href": "/memberships?page_size=2",
                        "previous_href": "/memberships?page=14page_size=2",
                        "next_href": "/memberships?page=2&page_size=2",
                        "last_href": "/memberships?page=14&page_size=2"
                    }
                },
                "memberships": [{
                    "id": "101",
                    "created_at": "2014-04-20T06:23:12Z",
                    "created_at": "2014-04-20T06:23:12Z",
                    "state": "active",
                    "roles": ["group_admin"],
                    "links": {
                        "user": "12",
                        "user_groups": "31"
                    }
                },{
                    "id": "111",
                    "created_at": "2014-04-20T06:23:12Z",
                    "created_at": "2014-04-20T06:23:12Z",
                    "state": "inactive",
                    "roles": [],
                    "links": {
                        "user": "12",
                        "user_groups": "20"
                    }
                }]
            }

### List all memberships [GET]
+ Parameters
  + page (optional, integer) ... index of the page to retrieve 1 by default
  + per_page (optional, integer) ... number of items per page 20 by default
  + sort (optional, string) ... field to sort by, id by default
  + user_id (optional, integer) ... filter list to memberships for a user
  + user_group_id (optional, integer) ... filter list to memberships for a user group

+ Response 200

    [Membership Collection][]

### Create a Membership [POST]
A membership creation request must include a link to a user and to a
user_group. Optionally it may include an array of roles. It's state
will be set to 'invited' until the linked user takes action.

+ Request (application/vnd.api+json)

        {
            "memberships": {
                "roles": ["group_admin"],
                "links": {
                    "user": "10",
                    "user_group": "11
                }
            }
        }

+ Response 201

    [Membership][]

# Group Collection
Resources related to _Panoptes Collections_.

## Collection [/collection/{id}]
A collection is a user curated set of subjects for a particular
project.

It has the following attributes:

- id
- created_at
- updated_at
- name
- display_name
- visible_to

*id*, *created_at*, and *updated_at* are set by the API. If visible_to
 is set to anything except an empty array it will only be visible to
 users assigned one of the visible roles for the collection.

+ Model (application/vnd.api+json)

    + Body

            {
                "links": {
                    "collections.subjects": {
                        "href": "/subjects{?collection_id=collections.id}",
                        "type": "subject"
                    }
                },
                "collections": {
                    "id": "101",
                    "created_at": "2014-04-20T06:23:12Z",
                    "created_at": "2014-04-20T06:23:12Z",
                    "name" : "flowers",
                    "display_name": "Lots of Pretty flowers",
                    "visible_to": [],
                    "links": {
                        "owner": {
                            "id": "10",
                            "href": "/users/10",
                            "type": "user"
                        }
                    }
                }
            }

### Retrieve a single collection [GET]

+ Response 200

    [Collection][]

### Edit a collection [PUT]
A user may edit a collecion they are the owner of or have edit
permissions for. A user may edit a collection's name, display_name, or
visible_to array, and may also send a full representation of a
collections subject links.

Sending subject links through a put is not recommend, especially if a
collection has many subjects.

Removing subjects from a collection does not destroy the subject record.

+ Request (application/vnd.api+json)

        {
            "collections": {
                "name": "flower_power",
                "visible_to": ["collaborators"]
            }
        }

+ Response 200

    [Collection][]

### Destroy a Collection [DELETE]
A user who is the owner of a collection or who has destroy permissions
for a collection, may delete it.

+ Response 204

## Add subject links [/collections/{id}/links/subjects]
Add subjects to a collection.

### Add links [POST]
A user is permitted to add subject if they are the collection owner or
have edit permissions.

+ Request (application/vnd.api+json)

        {
            "subjects": ["1", "2"]
        }

+ Response 200

    [Collection][]

## Remove subject links [/collection/{id}/links/subjects/{link_ids}]
Remove subjects from a collection.

### Remove links [DELETE]
A user is permitted to remove subjects if they are the colleciton
owner or have edit permissions.

+ Parameters
  + id (required, integer) ... id of collection to edit
  + link_ids (required, string) ... comma seperated list of ids to remove
    
+ Response 204

## Collection Collection [/collections{?page,per_page,sort,owner}]
A collection of Collection resources.

All collections add a meta attribute hash containing paging
information.

Collection are returned as an array under *collections*.

+ Model (application/vnd.api+json)

    + Body

            {
                "links": {
                    "collections.subjects": {
                        "href": "/subjects{?collection_id=collections.id}",
                        "type": "subject"
                    }
                },
                "meta": {
                    "memberships": {
                        "page": 1,
                        "page_size": 2,
                        "count": 28,
                        "include": [],
                        "page_count": 14,
                        "previous_page": 14,
                        "next_page": 2,
                        "first_href": "/memberships?page_size=2",
                        "previous_href": "/memberships?page=14page_size=2",
                        "next_href": "/memberships?page=2&page_size=2",
                        "last_href": "/memberships?page=14&page_size=2"
                    }
                },
                "collections": [{
                    "id": "101",
                    "created_at": "2014-04-20T06:23:12Z",
                    "created_at": "2014-04-20T06:23:12Z",
                    "name" : "flowers",
                    "display_name": "Lots of Pretty flowers",
                    "visible_to": [],
                    "links": {
                        "owner": {
                            "id": "10",
                            "href": "/users/10",
                            "type": "user"
                        }
                    }
                },{
                    "id": "102",
                    "created_at": "2014-04-21T09:23:12Z",
                    "created_at": "2014-04-21T16:23:12Z",
                    "name" : "bad_flowers",
                    "display_name": "Lots of Ugly flowers",
                    "visible_to": ["collaborators"],
                    "links": {
                        "owner": {
                            "id": "11",
                            "href": "/groups/11",
                            "type": "user_group"
                        }
                    }
                }]
            }

### List all collections [GET]
+ Parameters
  + page (optional, integer) ... the index of the page to retrieve default is 1
  + per_page (optional, integer) ... number of items to include on a page default is 20
  + sort (optional, string) ... field to sort by
  + owner (optional, string) ... string name of either a user or user group to filter by
    
+ Response 200

    [Collection][]

### Create Collection [POST]
A Collection only need a *display name* to be created. By default
*visible_to* will be set to an empty array, name will be the
underscored and downcased version of *display_name*, and the current
user will be set as the owner.

Optionally a create request may include name, visible_to, a link to an
owner, and links to subjects.

+ Request (application/vnd.api+json)

        {
            "collections": {
                "display_name": "flowers",
                "links": {
                    "owner": {
                        "id" : "10",
                        "type": "user_group"
                    }
                }
            }
        }

+ Response 201

    [Collection][]
